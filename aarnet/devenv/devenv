#!/bin/bash

# Import the .env file to load docker-compose project name
if [[ -f ./.env ]]; then
  source ./.env
else
  echo ".env file not found and is required"
  exit 1
fi

PROGNAME=`basename "$0"`
export WORKING_DIR=`pwd`
export SHARD_CREATE_DIR="/eos/${EOS_INSTANCE_NAME}/data"
export EOS_MNT="${WORKING_DIR}/devmnt/eos"

DC_NETWORK_NAME="${COMPOSE_PROJECT_NAME}_shard"
EOS_LOGS_VOLUME_NAME="${COMPOSE_PROJECT_NAME}_eos_logs"

#==============================================================================
# print script usage information
#==============================================================================

function usage {
  echo "./${PROGNAME} -b|-d|-s|-a|-v"
  echo "  -b pull eos-docker repo and build EOS docker images"
  echo "  -d delete/destroy all existing containers"
  echo "  -s start up containers and configure eos"
  echo "  -a do everything, in above order"
  echo "  -v verbose output"
  exit 1
}

function dockerr {
  if [ $jenkins ]; then
    docker "${@}"
  else
    sudo docker "${@}"
  fi
}

function dockercompose {
  if [ $jenkins ]; then
    if [ "${BUILD_TAG}" != "" ]; then
		BUILD_TAG=${BUILD_TAG} docker-compose -f docker-compose.Jenkins.yml "${@}"
	else
    	docker-compose "${@}"
	fi
  else
    sudo docker-compose "${@}"
  fi
}

function dcexec {
  dockercompose exec -T "${@}"
}

function quiet_dcexec {
  if [ "${VERBOSE}" = "true" ]; then
    dcexec "${@}"
  else
    dcexec "${@}" > /dev/null
  fi
}

# Load all files from a directory
function load_devenvd {
	if [[ -d ./devenv.d/ ]]; then
		str="$(find ./devenv.d/ -type f -name '*.sh' -print)"
		arr=( $str )
		for f in "${arr[@]}"; do
			if [[ -f $f ]]; then
				source $f || echo "$f not found"
			fi
		done
	fi
}

#==============================================================================
# pull eos-docker and build container images locally
#==============================================================================

function build_docker_images {
  cd ${WORKING_DIR}
  if [ -d "eos-docker_tmp" ]; then
    rm -rf eos-docker_tmp
  fi

  ( git clone -q -n git@git.aarnet.edu.au:dockerfiles/eos-docker.git eos-docker_tmp \
    && cd eos-docker_tmp \
    && git checkout ${EOS_DOCKER_COMMIT} )

  ## Can be used by external users, docker-compose.yml will need to be
  ## updated to not include aplregistry.aarnet.edu.au/ in the image name
  # git clone https://github.com/AARNet/eos-docker.git eos-docker_tmp
  cd eos-docker_tmp
  if [ $jenkins ]; then
	# Jenkins doesn't have sudo, so we need to strip it from the file
    sed -i "s/sudo //g" build
  fi

  # Use centos instead of rhel if we don't have access to the internal AARNet repositories
  curl -s --connect-timeout 5 https://repos.aarnet.net.au
  if [ $? -ne 0 ]; then
  	echo "Unable to connect to https://repos.aarnet.net.au, using centos:7 image instead."
    sed -i -e "s;export base_image=.*;export base_image=centos:7;" build
	sed -i -e "s;enabled=1;enabled=0;g" containers/content/yum/rhel7-dev.repo containers/content/yum/rhscl.repo
  fi

  # Disable graphite in the MGM so it doesn't log spam because it can't connect
  #sed -i -e 's;COPY .* /eos_graphite.py;;' containers/Dockertmp.mgm

  ./build -t ${EOS_BUILD_TAG} -i ${EOS_BUILD_IMAGES}
  cd ..
  rm -rf eos-docker_tmp
}


#==============================================================================
# tear down existing containers
#==============================================================================

function destroy {
  echo; echo "Removing containers..."
  echo;
  dockercompose ${dockercompose_opts} down -v
  # Use docker so we don't have to worry about permissions
  dockerr run --rm -v ${WORKING_DIR}:/tmpdir alpine:latest sh -c 'mkdir -p /tmpdir/e;rm -rf /tmpdir/e'
}

#==============================================================================
# recreate files
#==============================================================================

function create_files {
  # Use docker so we don't have to worry about sudo when we don't have it
  dockerr run --rm \
  -v ${EOS_MNT}:/e \
  -v ${WORKING_DIR}/files:/files \
  alpine:latest sh -c '
  cp /files/*.keytab /e;
  chown -R 2:2 /e;
  chmod 600 /e/eos.keytab;
  chmod 400 /e/qdb.keytab;
'
}

#==============================================================================
# set up eos test instances
#==============================================================================

function setup {
  create_files

  echo; echo "Starting containers..."
  echo; dockercompose up -d

  echo; echo "Checking mgm is booted..."
  echo; dcexec mgm eos ns | grep -c booted > /dev/null || { echo "Master MGM failed to start - check logs in $(dockerr volume inspect ${EOS_LOGS_VOLUME_NAME} | grep Mountpoint | sed -e 's;.*\"Mountpoint\": \"\(.*\)\",.*;\1;')/mgm/xrdlog.mgm" ; exit 1; }

  echo; echo "Setting log level to error..."
  echo; quiet_dcexec mgm "eos -r 0 0 -b debug err '*'"

  echo; echo "Setting up default space..."
  echo; quiet_dcexec mgm eos -r 0 0 -b space define default

  echo; echo "Setting up vids..."
  echo;
  quiet_dcexec mgm eos -r 0 0 -b vid enable sss
  quiet_dcexec mgm eos -r 0 0 -b vid enable unix
  quiet_dcexec mgm eos -r 0 0 -b vid enable https
  quiet_dcexec mgm eos -r 0 0 -b vid set membership daemon -uids adm
  quiet_dcexec mgm eos -r 0 0 -b vid set membership daemon -gids adm
  quiet_dcexec mgm eos -r 0 0 -b vid set membership daemon +sudo
  quiet_dcexec mgm eos -r 0 0 -b vid set membership ${EOS_UID} +sudo
  for svcname in $(dockercompose ps --services); do
    vidhost="${COMPOSE_PROJECT_NAME}_${svcname}_1.${DC_NETWORK_NAME}"
    echo "Adding vid tident and sss gateway for ${vidhost}"
    quiet_dcexec mgm eos -r 0 0 -b vid set map -tident *@${vidhost} vuid:${EOS_UID} vgid:${EOS_UID}
    quiet_dcexec mgm eos -r 0 0 -b vid set map -tident ${EOS_USER}@${vidhost} vuid:${EOS_UID} vgid:${EOS_UID}
    quiet_dcexec mgm eos -r 0 0 -b vid add gateway ${vidhost} sss
  done

  # create filesystems
  echo; echo "Setting up FST..."
  echo;
  quiet_dcexec fst mkdir /disks/eosfs1
  quiet_dcexec fst chown daemon:daemon /disks/eosfs1
  quiet_dcexec fst eos -r 0 0 -b fs add eosfs1 fst.${EOS_INSTANCE_NAME}:1095 /disks/eosfs1 default rw


  echo; echo "Creating and setting permissions on app directory ${SHARD_CREATE_DIR}"
  echo;
  quiet_dcexec fst eos -r 0 0 -b mkdir -p ${SHARD_CREATE_DIR}
  quiet_dcexec fst eos -r 0 0 -b chown ${EOS_UID}:${EOS_UID} ${SHARD_CREATE_DIR}
  quiet_dcexec mgm eos -r 0 0 -b attr set sys.acl="u:2:rwxc" /eos/${EOS_INSTANCE_NAME}
  quiet_dcexec mgm eos -r 0 0 -b attr set sys.acl="u:2:rwxc" ${SHARD_CREATE_DIR}

  echo; echo "Enabling space and groups..";
  echo;
  quiet_dcexec mgm eos space set default on

  echo; echo "EOS is now running."

  echo; echo "Running any extra source scripts in devenv.d/"
  load_devenvd

  echo; echo "..All done!"
}

#==============================================================================
# main script logic
#==============================================================================

if [ $# -eq 0 ]; then
  usage
fi

# check which options are set
while getopts "vjbdsaet:" opt; do
  case "$opt" in
    v) VERBOSE=true ;;
    b) B=true ;;
    d) D=true ;;
    s) S=true ;;
    a) A=true ;;
    e) extra=true ;;
    t) type=${OPTARG} ;;
    j) jenkins=true ;;
    \?) usage ;;
  esac
done

if [ $B ]; then
  build_docker_images
fi

# run actions in order
if [ $D ] || [ $A ]; then
  destroy
fi

if [ $S ] || [ $A ]; then
  setup
fi
